[{"C:\\Projects\\4\\src\\index.js":"1","C:\\Projects\\4\\src\\App.js":"2","C:\\Projects\\4\\src\\reportWebVitals.js":"3","C:\\Projects\\4\\src\\context\\UserContext.js":"4","C:\\Projects\\4\\src\\context\\ContractContext.js":"5","C:\\Projects\\4\\src\\components\\Main.jsx":"6","C:\\Projects\\4\\src\\components\\StakeBox.jsx":"7","C:\\Projects\\4\\src\\components\\NavBar.jsx":"8","C:\\Projects\\4\\src\\components\\YieldBox.jsx":"9"},{"size":517,"mtime":1624050607545,"results":"10","hashOfConfig":"11"},{"size":2520,"mtime":1624050607531,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1624050607546,"results":"13","hashOfConfig":"11"},{"size":518,"mtime":1624050607541,"results":"14","hashOfConfig":"11"},{"size":868,"mtime":1624050607540,"results":"15","hashOfConfig":"11"},{"size":11866,"mtime":1624053928140,"results":"16","hashOfConfig":"11"},{"size":2117,"mtime":1624050607540,"results":"17","hashOfConfig":"11"},{"size":1704,"mtime":1624050607539,"results":"18","hashOfConfig":"11"},{"size":1305,"mtime":1624050607540,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1q5801e",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":13,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Projects\\4\\src\\index.js",[],["41","42"],"C:\\Projects\\4\\src\\App.js",[],"C:\\Projects\\4\\src\\reportWebVitals.js",[],"C:\\Projects\\4\\src\\context\\UserContext.js",[],"C:\\Projects\\4\\src\\context\\ContractContext.js",[],"C:\\Projects\\4\\src\\components\\Main.jsx",["43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"import React, { useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\n\r\nimport { useUser } from '../context/UserContext'\r\nimport { useContract } from '../context/ContractContext'\r\n\r\nimport Dai from '../abi/Dai.json'\r\nimport HodlToken from '../abi/HodlToken.json'\r\nimport HodlFarm from '../abi/HodlFarm.json'\r\n\r\nimport NavBar from './NavBar'\r\nimport StakeBox from './StakeBox'\r\nimport YieldBox from './YieldBox'\r\n\r\n\r\nconst Container = styled.div`\r\n    margin-top: 2rem;\r\n    width: 100%;\r\n    height 25rem;\r\n`;\r\n\r\nconst Boxes = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n`;\r\n\r\n\r\n/**\r\n * @notice The contract variables are declared.\r\n */\r\n\r\nconst web3 = new Web3(Web3.givenProvider)\r\n// const hodlFarmAddress = '0xb3A7bC3fB20c289311e91dfE778d16590884e6F9'\r\n// const hodlTokenAddress = '0xec1285C81Ef9d039A46896e09f8f29dEb7d0556e'\r\n// const daiAddress = '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa'\r\nconst address = \"0x7d79d236B59Eeb4A83d11B4F10AD97E7bE69FD87\"\r\nconst abi = '[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementCountPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minusCountPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]'\r\n// const dai = new web3.eth.Contract(Dai.abi, daiAddress)\r\n// const hodlToken = new web3.eth.Contract(HodlToken.abi, hodlTokenAddress)\r\n// const hodlFarm = new web3.eth.Contract(HodlFarm.abi, hodlFarmAddress)\r\nconst testing = new web3.eth.Contract(abi,address)\r\n\r\n\r\n/**\r\n * @notice These functions convert to/from wei from/to eth.\r\n * @param {*} n This is the number to convert.\r\n */\r\n\r\nconst toWei = (n) => {\r\n    return web3.utils.toWei(n, 'ether')\r\n}\r\n\r\nconst fromWei = (n) => {\r\n    return web3.utils.fromWei(n, 'ether')\r\n}\r\n\r\n\r\nexport default function Main() {\r\n\r\n\r\n    /**\r\n     * @notice This lists the dApp's state fetched from useContext.\r\n     *         The UserContext is declared first.\r\n     */\r\n    const {\r\n        userAddress,\r\n        setUserAddress,\r\n        setDaiBalance,\r\n        stakingBalance,\r\n        setStakingBalance,\r\n        isStaking,\r\n        setIsStaking,\r\n        setHodlBalance,\r\n        setHodlYield,\r\n        hodlYield\r\n    } = useUser();\r\n\r\n    /**\r\n     * @notice The following declares the ContractContext.\r\n     */\r\n    \r\n    const {\r\n        setNetwork,\r\n        sentStake,\r\n        setSentStake,\r\n        sentUnstake,\r\n        setSentUnstake,\r\n        sentWithdrawal,\r\n        setSentWithdrawal\r\n    } = useContract();\r\n\r\n\r\n    /**\r\n     * @notice The following functions are used for fetching both user\r\n     *         and contract data. These functions are read-only regarding \r\n     *         the blockchain.\r\n     */\r\n\r\n    const loadUser = async() => {\r\n        let accounts = await web3.eth.getAccounts()\r\n        let account = accounts[0]\r\n        return account\r\n    }\r\n\r\n\r\n    const loadNetwork = useCallback(async() => {\r\n        let num = await web3.currentProvider.chainId;\r\n        setNetwork('Fantom')\r\n    }, [setNetwork])\r\n\r\n\r\n    const loadDaiBalance = useCallback(async(usr) => {\r\n        let bal = await testing.methods.countPublic().call()\r\n        setDaiBalance(bal)\r\n    }, [setDaiBalance])\r\n\r\n\r\n    // const loadStakingBalance = useCallback(async(usr) => {\r\n    //     let bal = await hodlFarm.methods.stakingBalance(usr.toString()).call()\r\n    //     let formatBal = fromWei(bal)\r\n    //     if(formatBal.length > 5) {\r\n    //         setStakingBalance(Number.parseFloat(fromWei(bal)).toPrecision(4))\r\n    //     } else {\r\n    //         setStakingBalance(formatBal)\r\n    //     }\r\n    //     if ( bal > 0){\r\n    //         return true\r\n    //     } else {\r\n    //         return false\r\n    //     }\r\n    // }, [setStakingBalance])\r\n\r\n/**\r\n * @notice This function fetches the current yield accrued by user's stake.\r\n * @dev    This operates almost exactly as in the Solidity contract for \r\n *         withdrawing yield. First, we fetch the number of minutes staked. Then,\r\n *         it saves the quotient of dividing the product (staking balance times \r\n *         the number of minutes) by 100 (creating 1% of staked balance per minute).\r\n * \r\n *          Before adding the initYield with the savedYield, they're both multiplied\r\n *          by one. This turns the string balances into numbers; otherwise, they concatenate.\r\n */\r\n    // const loadHodlYield = useCallback(async(usr) => {\r\n    //     let numOfMinutes = await hodlFarm.methods.calculateYieldTime(usr).call()\r\n    //     let initYield = ((stakingBalance * numOfMinutes) / 100)\r\n    //     let savedYield = await hodlFarm.methods.hodlBalance(usr).call()\r\n\r\n    //     let balA = (initYield)*1      //These variables convert the fetched strings into numbers\r\n    //     let balB = (fromWei(savedYield))*1\r\n    //     let totalYield = (balA + balB)\r\n\r\n    //     if(totalYield.toString().length > 5) {\r\n    //         return(Number.parseFloat(totalYield).toPrecision(3))\r\n    //     } else {\r\n    //         return totalYield\r\n    //     }\r\n    // }, [stakingBalance])\r\n\r\n\r\n    // const loadHodlBalance = useCallback(async(usr) => {\r\n    //     let bal = await hodlToken.methods.balanceOf(usr).call()\r\n    //     let formatBal = fromWei(bal)\r\n    //     if(formatBal.length > 5) {\r\n    //         return(Number.parseFloat(fromWei(bal)).toFixed(4))\r\n    //     } else {\r\n    //         return formatBal\r\n    //     }\r\n    // }, [])\r\n\r\n    const loadCountPublic = useCallback(async() => {\r\n        let countPublic = await testing.methods.countPublic.call()\r\n        return countPublic\r\n    }, [])\r\n\r\n\r\n    /**\r\n     * @notice The componentDidMount function initializes all of the previous\r\n     *         functions for the useEffect hook.\r\n     */\r\n\r\n    const componentDidMount = useCallback(async() => {\r\n        await loadNetwork()\r\n        await loadUser().then(response => {\r\n            // setUserAddress(response)\r\n            // loadDaiBalance(response)\r\n            // loadHodlYield(response)\r\n            // loadHodlBalance(response).then(response => {\r\n            //     setHodlBalance(response)\r\n            // })\r\n            // loadStakingBalance(response).then(response => {\r\n            //     setIsStaking(response)\r\n            // })\r\n            loadCountPublic(response).then(response => {\r\n                setHodlBalance(response)\r\n            })\r\n        })\r\n    }, [ \r\n        loadCountPublic,\r\n        // loadDaiBalance, \r\n        // loadStakingBalance, \r\n        // loadNetwork,\r\n        // loadHodlYield,\r\n        // loadHodlBalance,\r\n        // setUserAddress,\r\n        setHodlBalance\r\n        // setIsStaking,\r\n    ])\r\n\r\n\r\n    useEffect(() => {\r\n        if(userAddress === ''){\r\n            componentDidMount()\r\n        }\r\n    }, [userAddress, componentDidMount])\r\n\r\n    /**\r\n     * @notice This useEffect hook fetches the side effects of the loadHodlYield\r\n     *         function in order to display the user's current yield.\r\n     */\r\n\r\n    useEffect(() => {\r\n        if(stakingBalance > 0 || userAddress !== ''){\r\n            loadHodlYield(userAddress).then(response => {\r\n                setHodlYield(response)\r\n            })\r\n        }\r\n    }, [userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, loadHodlYield, setIsStaking])\r\n\r\n    /**\r\n     * @notice This useEffect creates a 60 second timer when the staking mechanism\r\n     *          is triggered.\r\n     */\r\n    useEffect(() => {\r\n        let interval = null\r\n        if(isStaking){\r\n            interval = setInterval(() => {\r\n                loadHodlYield(userAddress).then(response => {\r\n                    setHodlYield(response)\r\n                })\r\n            }, 60000)\r\n        }\r\n        return () => clearInterval(interval)\r\n    }, [isStaking, userAddress, loadHodlYield, setHodlYield])\r\n\r\n   /**\r\n    * @notice The following functions write to the smart contract.\r\n    * \r\n    * \r\n    * @notice This function locks up ('stakes') Dai in the contract.\r\n    * @dev    The sentStake, sentUnstake, and sentWithdrawal boolean values \r\n    *         are used as signals for the useEffect hook. Instead of setting\r\n    *         their default value to false, they're triggered to false in the\r\n    *         beginning of the function call. Upon receipt, they're switched to \r\n    *         'on.'\r\n    * @param {*This is the amount of Dai to stake in the contract.} x \r\n    */\r\n\r\n    const stake = async(x) => {\r\n        setSentStake(false)\r\n        let utils = { from: userAddress }\r\n        let bal = toWei(x)\r\n        await dai.methods.approve(hodlFarmAddress, bal).send(utils)\r\n        await hodlFarm.methods.stake(bal).send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentStake(true)\r\n        })\r\n        setIsStaking(true)\r\n    }\r\n\r\n    const unstake = async() => {\r\n        setSentUnstake(false)\r\n        let utils = { from: userAddress }\r\n        await hodlFarm.methods.unstake().send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentUnstake(true)\r\n        })\r\n        setIsStaking(false)\r\n    }\r\n\r\n    const withdrawYield = async() => {\r\n        setSentWithdrawal(false)\r\n        let utils = { from: userAddress }\r\n        await hodlFarm.methods.withdrawYield().send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentWithdrawal(true)\r\n        })\r\n    }\r\n\r\n\r\n    //\r\n    //waiting to fetch new balance after function call\r\n    //\r\n\r\n    //for dai\r\n\r\n    /**\r\n     * @notice These useEffect hooks are triggered by the preceding functions.\r\n     *         The former hook fetches the Dai balances (Dai balance and stakingBalance).\r\n     *         The latter effect fetches the hodlToken balance and current yield.\r\n     */\r\n\r\n    useEffect(() => {\r\n        if(sentStake || sentUnstake){\r\n            loadDaiBalance(userAddress)\r\n            loadStakingBalance(userAddress)\r\n        }\r\n    }, [sentStake, sentUnstake, userAddress, loadDaiBalance, loadStakingBalance])\r\n\r\n\r\n        useEffect(() => {\r\n        if(sentWithdrawal){\r\n            loadHodlBalance(userAddress).then(res => {\r\n                setHodlBalance(res)\r\n            })\r\n            setHodlYield(0)\r\n        }\r\n    }, [sentWithdrawal, userAddress, loadHodlBalance, setHodlYield, setHodlBalance])\r\n\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            <Container>\r\n                <Boxes>\r\n                    <StakeBox  \r\n                        stake={stake} \r\n                        unstake={unstake}\r\n                    />\r\n                    <YieldBox withdrawYield={withdrawYield}/> \r\n                </Boxes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Projects\\4\\src\\components\\StakeBox.jsx",[],"C:\\Projects\\4\\src\\components\\NavBar.jsx",[],"C:\\Projects\\4\\src\\components\\YieldBox.jsx",[],["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":8,"column":8,"nodeType":"76","messageId":"77","endLine":8,"endColumn":11},{"ruleId":"74","severity":1,"message":"78","line":9,"column":8,"nodeType":"76","messageId":"77","endLine":9,"endColumn":17},{"ruleId":"74","severity":1,"message":"79","line":10,"column":8,"nodeType":"76","messageId":"77","endLine":10,"endColumn":16},{"ruleId":"74","severity":1,"message":"80","line":54,"column":7,"nodeType":"76","messageId":"77","endLine":54,"endColumn":14},{"ruleId":"74","severity":1,"message":"81","line":68,"column":9,"nodeType":"76","messageId":"77","endLine":68,"endColumn":23},{"ruleId":"74","severity":1,"message":"82","line":71,"column":9,"nodeType":"76","messageId":"77","endLine":71,"endColumn":26},{"ruleId":"74","severity":1,"message":"83","line":108,"column":13,"nodeType":"76","messageId":"77","endLine":108,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":198,"column":8,"nodeType":"86","endLine":208,"endColumn":6,"suggestions":"87"},{"ruleId":"88","severity":2,"message":"89","line":224,"column":13,"nodeType":"76","messageId":"90","endLine":224,"endColumn":26},{"ruleId":"84","severity":1,"message":"91","line":228,"column":8,"nodeType":"86","endLine":228,"endColumn":102,"suggestions":"92"},{"ruleId":"88","severity":2,"message":"89","line":228,"column":74,"nodeType":"76","messageId":"90","endLine":228,"endColumn":87},{"ruleId":"88","severity":2,"message":"89","line":238,"column":17,"nodeType":"76","messageId":"90","endLine":238,"endColumn":30},{"ruleId":"84","severity":1,"message":"91","line":244,"column":8,"nodeType":"86","endLine":244,"endColumn":61,"suggestions":"93"},{"ruleId":"88","severity":2,"message":"89","line":244,"column":33,"nodeType":"76","messageId":"90","endLine":244,"endColumn":46},{"ruleId":"88","severity":2,"message":"94","line":263,"column":15,"nodeType":"76","messageId":"90","endLine":263,"endColumn":18},{"ruleId":"88","severity":2,"message":"95","line":263,"column":35,"nodeType":"76","messageId":"90","endLine":263,"endColumn":50},{"ruleId":"88","severity":2,"message":"96","line":264,"column":15,"nodeType":"76","messageId":"90","endLine":264,"endColumn":23},{"ruleId":"88","severity":2,"message":"96","line":275,"column":15,"nodeType":"76","messageId":"90","endLine":275,"endColumn":23},{"ruleId":"88","severity":2,"message":"96","line":286,"column":15,"nodeType":"76","messageId":"90","endLine":286,"endColumn":23},{"ruleId":"88","severity":2,"message":"97","line":309,"column":13,"nodeType":"76","messageId":"90","endLine":309,"endColumn":31},{"ruleId":"84","severity":1,"message":"98","line":311,"column":8,"nodeType":"86","endLine":311,"endColumn":81,"suggestions":"99"},{"ruleId":"88","severity":2,"message":"97","line":311,"column":62,"nodeType":"76","messageId":"90","endLine":311,"endColumn":80},{"ruleId":"88","severity":2,"message":"100","line":316,"column":13,"nodeType":"76","messageId":"90","endLine":316,"endColumn":28},{"ruleId":"84","severity":1,"message":"101","line":321,"column":8,"nodeType":"86","endLine":321,"endColumn":84,"suggestions":"102"},{"ruleId":"88","severity":2,"message":"100","line":321,"column":38,"nodeType":"76","messageId":"90","endLine":321,"endColumn":53},{"ruleId":"70","replacedBy":"103"},{"ruleId":"72","replacedBy":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'Dai' is defined but never used.","Identifier","unusedVar","'HodlToken' is defined but never used.","'HodlFarm' is defined but never used.","'fromWei' is assigned a value but never used.","'setUserAddress' is assigned a value but never used.","'setStakingBalance' is assigned a value but never used.","'num' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'loadNetwork'. Either include it or remove the dependency array.","ArrayExpression",["107"],"no-undef","'loadHodlYield' is not defined.","undef","React Hook useEffect has an unnecessary dependency: 'loadHodlYield'. Either exclude it or remove the dependency array. Outer scope values like 'loadHodlYield' aren't valid dependencies because mutating them doesn't re-render the component.",["108"],["109"],"'dai' is not defined.","'hodlFarmAddress' is not defined.","'hodlFarm' is not defined.","'loadStakingBalance' is not defined.","React Hook useEffect has an unnecessary dependency: 'loadStakingBalance'. Either exclude it or remove the dependency array. Outer scope values like 'loadStakingBalance' aren't valid dependencies because mutating them doesn't re-render the component.",["110"],"'loadHodlBalance' is not defined.","React Hook useEffect has an unnecessary dependency: 'loadHodlBalance'. Either exclude it or remove the dependency array. Outer scope values like 'loadHodlBalance' aren't valid dependencies because mutating them doesn't re-render the component.",["111"],["105"],["106"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [loadCountPublic, loadNetwork, setHodlBalance]",{"range":"122","text":"123"},"Update the dependencies array to be: [userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, setIsStaking]",{"range":"124","text":"125"},"Update the dependencies array to be: [isStaking, userAddress, setHodlYield]",{"range":"126","text":"127"},"Update the dependencies array to be: [sentStake, sentUnstake, userAddress, loadDaiBalance]",{"range":"128","text":"129"},"Update the dependencies array to be: [sentWithdrawal, userAddress, setHodlYield, setHodlBalance]",{"range":"130","text":"131"},[7529,7785],"[loadCountPublic, loadNetwork, setHodlBalance]",[8320,8414],"[userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, setIsStaking]",[8886,8939],"[isStaking, userAddress, setHodlYield]",[11109,11182],"[sentStake, sentUnstake, userAddress, loadDaiBalance]",[11401,11477],"[sentWithdrawal, userAddress, setHodlYield, setHodlBalance]"]