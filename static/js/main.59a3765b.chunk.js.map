{"version":3,"sources":["context/UserContext.js","context/ContractContext.js","Farmer.png","components/NavBar.jsx","components/StakeBox.jsx","components/YieldBox.jsx","components/Main.jsx","grass.jpg","App.js","reportWebVitals.js","index.js"],"names":["UserContext","React","createContext","userAddress","setUserAddress","daiBalance","setDaiBalance","stakingBalance","setStakingBalance","isStaking","setIsStaking","hodlBalance","setHodlBalance","hodlYield","setHodlYield","UserProvider","Provider","useUser","useContext","ContractContext","hodlFarmAddress","setHodlFarmAddress","hodlTokenAddress","setHodlTokenAddress","daiAddress","setDaiAddress","hodlFarm","setHodlFarm","hodlToken","setHodlToken","dai","setDai","hodlFarmBalance","setHodlFarmBalance","network","setNetwork","web3","setWeb3","sentStake","setSentStake","sentUnstake","setSentUnstake","sentWithdrawal","setSentWithdrawal","ContractProvider","useContract","styled","nav","span","Address","div","img","input","StakeButton","button","Web3","givenProvider","testing","eth","Contract","Main","loadUser","a","getAccounts","accounts","account","loadNetwork","useCallback","currentProvider","chainId","loadDaiBalance","usr","methods","countPublic","call","bal","loadCountPublic","componentDidMount","then","response","useEffect","Img","grass","App","useState","userState","contractState","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59a3765b.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\n\r\nexport const UserContext = React.createContext({\r\n    userAddress: '', \r\n    setUserAddress: () => [],\r\n    daiBalance: '', \r\n    setDaiBalance: () => {},\r\n    stakingBalance: '',\r\n    setStakingBalance: () => {},\r\n    isStaking: '',\r\n    setIsStaking: () => {},\r\n    hodlBalance: '',\r\n    setHodlBalance: () => {},\r\n    hodlYield: '',\r\n    setHodlYield: () => {}\r\n})\r\n\r\nexport const UserProvider = UserContext.Provider\r\nexport const useUser = () => useContext(UserContext)","import React, { useContext } from 'react'\r\n\r\nexport const ContractContext = React.createContext({\r\n    hodlFarmAddress: '',\r\n    setHodlFarmAddress: () => {},\r\n    hodlTokenAddress: '',\r\n    setHodlTokenAddress: () => {},\r\n    daiAddress: '',\r\n    setDaiAddress: () => {},\r\n    hodlFarm: '',\r\n    setHodlFarm: () => {},\r\n    hodlToken: '',\r\n    setHodlToken: () => {},\r\n    dai: '',\r\n    setDai: () => {},\r\n    hodlFarmBalance: '',\r\n    setHodlFarmBalance: () => {},\r\n    network: '',\r\n    setNetwork: () => {},\r\n    web3: '',\r\n    setWeb3: () => {},\r\n    //calls to update balances\r\n    sentStake: '',\r\n    setSentStake: () => {},\r\n    sentUnstake: '',\r\n    setSentUnstake: () => {},\r\n    sentWithdrawal: '',\r\n    setSentWithdrawal: () => {}\r\n})\r\n\r\nexport const ContractProvider = ContractContext.Provider\r\nexport const useContract = () => useContext(ContractContext)","export default __webpack_public_path__ + \"static/media/Farmer.96f82f20.png\";","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Farmer from '../Farmer.png'\r\n\r\nimport { useUser } from '../context/UserContext'\r\nimport { useContract } from '../context/ContractContext'\r\n\r\nconst Bar = styled.nav`\r\n    width: 100%;\r\n    height: 8rem;\r\n    background-color: grey;\r\n    opacity: 0.75;\r\n`;\r\n\r\nconst Title = styled.span`\r\n    color: black;\r\n    font-size: 4rem;\r\n    text-shadow: 2px 2px #999999;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst Address = styled.span`\r\n    color: white;\r\n    font-size: 1.4rem;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-self: flex-end;\r\n`;\r\n\r\nconst Network = styled(Address)`\r\n    margin-left: 0;\r\n    margin-right: 2rem;\r\n`;\r\n\r\nconst Adjust = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`;\r\n\r\nconst Img = styled.img`\r\n    position: relative;\r\n    width: 2.3rem;\r\n    height: 2.1rem;\r\n    margin-right: .8rem;\r\n`;\r\n\r\n\r\nexport default function NavBar() {\r\n\r\n    const {\r\n        userAddress\r\n    } = useUser()\r\n\r\n    const {\r\n        network\r\n    } = useContract()\r\n\r\n    const address = userAddress ? userAddress.slice(0, 5) + '...' + userAddress.slice(38, 42) : null\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Bar>\r\n                <Adjust>\r\n                    <Address>\r\n                        <Img src={Farmer} />\r\n                        Farmer: {address}\r\n                    </Address>\r\n                    <Title>\r\n                        Hodl Farm\r\n                    </Title>\r\n                    <Network>\r\n                        Network: {network}\r\n                    </Network>\r\n                </Adjust>\r\n            </Bar>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { useUser } from '../context/UserContext'\r\n\r\nconst StakeContainer = styled.div`\r\n    background-color: #654321;\r\n    width: 30rem;\r\n    height: 20rem;\r\n    margin-top: 2rem;\r\n    opacity: 0.9;\r\n    color: white;\r\n    font-size: 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst StakeInput = styled.input`\r\n    height: 2.6rem;\r\n    width: 10rem;\r\n    margin-top: .9rem;\r\n`;\r\n\r\nconst StakeButton = styled.button`\r\n    width: 7rem;\r\n    height: 3rem;\r\n    margin-top: 1rem;\r\n    background-color: green;\r\n    color: white;\r\n    font-size: 1.4rem;\r\n`;\r\n\r\nconst Center = styled.div`\r\n    margin-top: 2rem;\r\n`;\r\n\r\nconst Div = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst UnstakeButton = styled(StakeButton)``;\r\n\r\nexport default function StakeBox(props) {\r\n\r\n    const {\r\n        daiBalance,\r\n        stakingBalance,\r\n    } = useUser()\r\n\r\n    \r\n    const [ stakeAmount, setStakeAmount ] = useState('');\r\n\r\n\r\n    const stake = async() => {\r\n        props.stake(stakeAmount)\r\n    }\r\n\r\n    const handleStake = (event) => {\r\n        setStakeAmount(event.target.value)\r\n    }\r\n\r\n    const unstake = () => {\r\n        props.unstake()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <StakeContainer>\r\n                <Center>\r\n                    Staked Balance: {stakingBalance}\r\n                    <div/>\r\n                    Dai Balance: {daiBalance}\r\n                    <Div>\r\n                        <div>\r\n                        <StakeInput onChange={handleStake} placeholder=\"Enter amount...\"/>\r\n                        </div>\r\n                        <div>\r\n                        <StakeButton onClick={stake}>\r\n                            Stake\r\n                        </StakeButton>\r\n                        </div>\r\n                    </Div>\r\n                    <UnstakeButton onClick={unstake}>\r\n                        Unstake\r\n                    </UnstakeButton>\r\n                </Center>\r\n            </StakeContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { useUser } from '../context/UserContext'\r\n\r\nconst YieldContainer = styled.div`\r\n    background-color: green;\r\n    width: 30rem;\r\n    height: 20rem;\r\n    margin-top: 2rem;\r\n    opacity: 0.9;\r\n    color: white;\r\n    font-size: 1.75rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst WithdrawButton = styled.button`\r\n    width: 15rem;\r\n    height: 5rem;\r\n    margin-top: 1rem;\r\n    font-size: 2rem;\r\n    background-color: #654321;\r\n    color: white;\r\n    margin-top: 2rem;\r\n`;\r\n\r\nconst Center = styled.div`\r\n    margin-top: 2rem;\r\n`;\r\n\r\nexport default function YieldBox(props) {\r\n\r\n    const {\r\n        hodlYield,\r\n        hodlBalance\r\n    } = useUser()\r\n\r\n\r\n    const withdrawYield = () => {\r\n        props.withdrawYield()\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <YieldContainer>\r\n                <Center>\r\n                    Hodl Balance: {hodlBalance}\r\n                    <div/>\r\n                    Hodl Yield: {hodlYield}\r\n                    <div/>\r\n                    <WithdrawButton onClick={withdrawYield}>\r\n                        Withdraw\r\n                    </WithdrawButton>\r\n                </Center>\r\n            </YieldContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\n\r\nimport { useUser } from '../context/UserContext'\r\nimport { useContract } from '../context/ContractContext'\r\n\r\nimport Dai from '../abi/Dai.json'\r\nimport HodlToken from '../abi/HodlToken.json'\r\nimport HodlFarm from '../abi/HodlFarm.json'\r\n\r\nimport NavBar from './NavBar'\r\nimport StakeBox from './StakeBox'\r\nimport YieldBox from './YieldBox'\r\n\r\n\r\nconst Container = styled.div`\r\n    margin-top: 2rem;\r\n    width: 100%;\r\n    height 25rem;\r\n`;\r\n\r\nconst Boxes = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n`;\r\n\r\n\r\n/**\r\n * @notice The contract variables are declared.\r\n */\r\n\r\nconst web3 = new Web3(Web3.givenProvider)\r\n// const hodlFarmAddress = '0xb3A7bC3fB20c289311e91dfE778d16590884e6F9'\r\n// const hodlTokenAddress = '0xec1285C81Ef9d039A46896e09f8f29dEb7d0556e'\r\n// const daiAddress = '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa'\r\nconst address = \"0x7d79d236B59Eeb4A83d11B4F10AD97E7bE69FD87\"\r\nconst abi = '[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementCountPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minusCountPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]'\r\n// const dai = new web3.eth.Contract(Dai.abi, daiAddress)\r\n// const hodlToken = new web3.eth.Contract(HodlToken.abi, hodlTokenAddress)\r\n// const hodlFarm = new web3.eth.Contract(HodlFarm.abi, hodlFarmAddress)\r\nconst testing = new web3.eth.Contract(abi,address)\r\n\r\n\r\n/**\r\n * @notice These functions convert to/from wei from/to eth.\r\n * @param {*} n This is the number to convert.\r\n */\r\n\r\nconst toWei = (n) => {\r\n    return web3.utils.toWei(n, 'ether')\r\n}\r\n\r\nconst fromWei = (n) => {\r\n    return web3.utils.fromWei(n, 'ether')\r\n}\r\n\r\n\r\nexport default function Main() {\r\n\r\n\r\n    /**\r\n     * @notice This lists the dApp's state fetched from useContext.\r\n     *         The UserContext is declared first.\r\n     */\r\n    const {\r\n        userAddress,\r\n        setUserAddress,\r\n        setDaiBalance,\r\n        stakingBalance,\r\n        setStakingBalance,\r\n        isStaking,\r\n        setIsStaking,\r\n        setHodlBalance,\r\n        setHodlYield,\r\n        hodlYield\r\n    } = useUser();\r\n\r\n    /**\r\n     * @notice The following declares the ContractContext.\r\n     */\r\n    \r\n    const {\r\n        setNetwork,\r\n        sentStake,\r\n        setSentStake,\r\n        sentUnstake,\r\n        setSentUnstake,\r\n        sentWithdrawal,\r\n        setSentWithdrawal\r\n    } = useContract();\r\n\r\n\r\n    /**\r\n     * @notice The following functions are used for fetching both user\r\n     *         and contract data. These functions are read-only regarding \r\n     *         the blockchain.\r\n     */\r\n\r\n    const loadUser = async() => {\r\n        let accounts = await web3.eth.getAccounts()\r\n        let account = accounts[0]\r\n        return account\r\n    }\r\n\r\n\r\n    const loadNetwork = useCallback(async() => {\r\n        let num = await web3.currentProvider.chainId;\r\n        setNetwork('Fantom')\r\n    }, [setNetwork])\r\n\r\n\r\n    const loadDaiBalance = useCallback(async(usr) => {\r\n        let bal = await testing.methods.countPublic().call()\r\n        setDaiBalance(bal)\r\n    }, [setDaiBalance])\r\n\r\n\r\n    // const loadStakingBalance = useCallback(async(usr) => {\r\n    //     let bal = await hodlFarm.methods.stakingBalance(usr.toString()).call()\r\n    //     let formatBal = fromWei(bal)\r\n    //     if(formatBal.length > 5) {\r\n    //         setStakingBalance(Number.parseFloat(fromWei(bal)).toPrecision(4))\r\n    //     } else {\r\n    //         setStakingBalance(formatBal)\r\n    //     }\r\n    //     if ( bal > 0){\r\n    //         return true\r\n    //     } else {\r\n    //         return false\r\n    //     }\r\n    // }, [setStakingBalance])\r\n\r\n/**\r\n * @notice This function fetches the current yield accrued by user's stake.\r\n * @dev    This operates almost exactly as in the Solidity contract for \r\n *         withdrawing yield. First, we fetch the number of minutes staked. Then,\r\n *         it saves the quotient of dividing the product (staking balance times \r\n *         the number of minutes) by 100 (creating 1% of staked balance per minute).\r\n * \r\n *          Before adding the initYield with the savedYield, they're both multiplied\r\n *          by one. This turns the string balances into numbers; otherwise, they concatenate.\r\n */\r\n    // const loadHodlYield = useCallback(async(usr) => {\r\n    //     let numOfMinutes = await hodlFarm.methods.calculateYieldTime(usr).call()\r\n    //     let initYield = ((stakingBalance * numOfMinutes) / 100)\r\n    //     let savedYield = await hodlFarm.methods.hodlBalance(usr).call()\r\n\r\n    //     let balA = (initYield)*1      //These variables convert the fetched strings into numbers\r\n    //     let balB = (fromWei(savedYield))*1\r\n    //     let totalYield = (balA + balB)\r\n\r\n    //     if(totalYield.toString().length > 5) {\r\n    //         return(Number.parseFloat(totalYield).toPrecision(3))\r\n    //     } else {\r\n    //         return totalYield\r\n    //     }\r\n    // }, [stakingBalance])\r\n\r\n\r\n    // const loadHodlBalance = useCallback(async(usr) => {\r\n    //     let bal = await hodlToken.methods.balanceOf(usr).call()\r\n    //     let formatBal = fromWei(bal)\r\n    //     if(formatBal.length > 5) {\r\n    //         return(Number.parseFloat(fromWei(bal)).toFixed(4))\r\n    //     } else {\r\n    //         return formatBal\r\n    //     }\r\n    // }, [])\r\n\r\n    const loadCountPublic = useCallback(async() => {\r\n        let countPublic = await testing.methods.countPublic.call()\r\n        return countPublic\r\n    }, [])\r\n\r\n\r\n    /**\r\n     * @notice The componentDidMount function initializes all of the previous\r\n     *         functions for the useEffect hook.\r\n     */\r\n\r\n    const componentDidMount = useCallback(async() => {\r\n        await loadNetwork()\r\n        await loadUser().then(response => {\r\n            setUserAddress(response)\r\n            loadDaiBalance(response)\r\n            // loadHodlYield(response)\r\n            // loadHodlBalance(response).then(response => {\r\n            //     setHodlBalance(response)\r\n            // })\r\n            // loadStakingBalance(response).then(response => {\r\n            //     setIsStaking(response)\r\n            // })\r\n            loadCountPublic(response).then(response => {\r\n                setHodlBalance(response)\r\n            })\r\n        })\r\n    }, [ \r\n        loadCountPublic,\r\n        loadDaiBalance, \r\n        // loadStakingBalance, \r\n        // loadNetwork,\r\n        // loadHodlYield,\r\n        // loadHodlBalance,\r\n        setUserAddress,\r\n        setHodlBalance\r\n        // setIsStaking,\r\n    ])\r\n\r\n\r\n    useEffect(() => {\r\n        if(userAddress === ''){\r\n            componentDidMount()\r\n        }\r\n    }, [userAddress, componentDidMount])\r\n\r\n    /**\r\n     * @notice This useEffect hook fetches the side effects of the loadHodlYield\r\n     *         function in order to display the user's current yield.\r\n     */\r\n\r\n    // useEffect(() => {\r\n    //     if(stakingBalance > 0 || userAddress !== ''){\r\n    //         loadHodlYield(userAddress).then(response => {\r\n    //             setHodlYield(response)\r\n    //         })\r\n    //     }\r\n    // }, [userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, loadHodlYield, setIsStaking])\r\n\r\n    /**\r\n     * @notice This useEffect creates a 60 second timer when the staking mechanism\r\n     *          is triggered.\r\n     */\r\n    // useEffect(() => {\r\n    //     let interval = null\r\n    //     if(isStaking){\r\n    //         interval = setInterval(() => {\r\n    //             loadHodlYield(userAddress).then(response => {\r\n    //                 setHodlYield(response)\r\n    //             })\r\n    //         }, 60000)\r\n    //     }\r\n    //     return () => clearInterval(interval)\r\n    // }, [isStaking, userAddress, loadHodlYield, setHodlYield])\r\n\r\n   /**\r\n    * @notice The following functions write to the smart contract.\r\n    * \r\n    * \r\n    * @notice This function locks up ('stakes') Dai in the contract.\r\n    * @dev    The sentStake, sentUnstake, and sentWithdrawal boolean values \r\n    *         are used as signals for the useEffect hook. Instead of setting\r\n    *         their default value to false, they're triggered to false in the\r\n    *         beginning of the function call. Upon receipt, they're switched to \r\n    *         'on.'\r\n    * @param {*This is the amount of Dai to stake in the contract.} x \r\n    */\r\n\r\n    // const stake = async(x) => {\r\n    //     setSentStake(false)\r\n    //     let utils = { from: userAddress }\r\n    //     let bal = toWei(x)\r\n    //     await dai.methods.approve(hodlFarmAddress, bal).send(utils)\r\n    //     await hodlFarm.methods.stake(bal).send(utils)\r\n    //     .on('receipt', function(receipt){\r\n    //         console.log(receipt)\r\n    //         setSentStake(true)\r\n    //     })\r\n    //     setIsStaking(true)\r\n    // }\r\n\r\n    // const unstake = async() => {\r\n    //     setSentUnstake(false)\r\n    //     let utils = { from: userAddress }\r\n    //     await hodlFarm.methods.unstake().send(utils)\r\n    //     .on('receipt', function(receipt){\r\n    //         console.log(receipt)\r\n    //         setSentUnstake(true)\r\n    //     })\r\n    //     setIsStaking(false)\r\n    // }\r\n\r\n    // const withdrawYield = async() => {\r\n    //     setSentWithdrawal(false)\r\n    //     let utils = { from: userAddress }\r\n    //     await hodlFarm.methods.withdrawYield().send(utils)\r\n    //     .on('receipt', function(receipt){\r\n    //         console.log(receipt)\r\n    //         setSentWithdrawal(true)\r\n    //     })\r\n    // }\r\n\r\n\r\n    //\r\n    //waiting to fetch new balance after function call\r\n    //\r\n\r\n    //for dai\r\n\r\n    /**\r\n     * @notice These useEffect hooks are triggered by the preceding functions.\r\n     *         The former hook fetches the Dai balances (Dai balance and stakingBalance).\r\n     *         The latter effect fetches the hodlToken balance and current yield.\r\n     */\r\n\r\n    // useEffect(() => {\r\n    //     if(sentStake || sentUnstake){\r\n    //         loadDaiBalance(userAddress)\r\n    //         loadStakingBalance(userAddress)\r\n    //     }\r\n    // }, [sentStake, sentUnstake, userAddress, loadDaiBalance, loadStakingBalance])\r\n\r\n\r\n    //     useEffect(() => {\r\n    //     if(sentWithdrawal){\r\n    //         loadHodlBalance(userAddress).then(res => {\r\n    //             setHodlBalance(res)\r\n    //         })\r\n    //         setHodlYield(0)\r\n    //     }\r\n    // }, [sentWithdrawal, userAddress, loadHodlBalance, setHodlYield, setHodlBalance])\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <NavBar/>\r\n    //         <Container>\r\n    //             <Boxes>\r\n    //                 <StakeBox  \r\n    //                     stake={stake} \r\n    //                     unstake={unstake}\r\n    //                 />\r\n    //                 <YieldBox withdrawYield={withdrawYield}/> \r\n    //             </Boxes>\r\n    //         </Container>\r\n    //     </div>\r\n    // )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/grass.797c5bed.jpg\";","import React, { useState } from 'react'\r\nimport Main from './components/Main'\r\nimport styled from 'styled-components'\r\nimport grass from './grass.jpg'\r\n\r\nimport { UserProvider } from './context/UserContext'\r\nimport { ContractProvider } from './context/ContractContext'\r\n\r\nconst Img = styled.div`\r\n  border: 1px solid #000;\r\n  background-image: url(${grass});\r\n  width: 99/8%;\r\n  height: 755px;\r\n  opacity: 0.7;\r\n`;\r\n\r\nfunction App() {\r\n\r\n  //user state\r\n  const [ userAddress, setUserAddress ] = useState('');\r\n  const [ daiBalance, setDaiBalance ] = useState('');\r\n  const [ stakingBalance, setStakingBalance ] = useState('');\r\n  const [ isStaking, setIsStaking ] = useState('');\r\n  const [ hodlBalance, setHodlBalance ] = useState('');\r\n  const [ hodlYield, setHodlYield ] = useState('');\r\n\r\n\r\n  const userState = {\r\n    userAddress,\r\n    setUserAddress,\r\n    daiBalance,\r\n    setDaiBalance,\r\n    stakingBalance,\r\n    setStakingBalance,\r\n    isStaking,\r\n    setIsStaking,\r\n    hodlBalance,\r\n    setHodlBalance,\r\n    hodlYield,\r\n    setHodlYield,\r\n  }\r\n\r\n\r\n  //contract state\r\n  const [ hodlFarmAddress, setHodlFarmAddress ] = useState('');\r\n  const [ hodlTokenAddress, setHodlTokenAddress ] = useState('');\r\n  const [ daiAddress, setDaiAddress ] = useState('');\r\n  const [ hodlFarm, setHodlFarm ] = useState('');\r\n  const [ hodlToken, setHodlToken ] = useState('');\r\n  const [ dai, setDai ] = useState('');\r\n  const [ hodlFarmBalance, setHodlFarmBalance ] = useState('');\r\n  const [ network, setNetwork ] = useState('');\r\n  const [ web3, setWeb3 ] = useState('');\r\n  //calls to update balances\r\n  const [ sentStake, setSentStake ] = useState('');\r\n  const [ sentUnstake, setSentUnstake ] = useState('');\r\n  const [ sentWithdrawal, setSentWithdrawal ] = useState('');\r\n\r\n\r\n  const contractState = {\r\n    hodlFarmAddress,\r\n    setHodlFarmAddress,\r\n    hodlTokenAddress,\r\n    setHodlTokenAddress,\r\n    daiAddress,\r\n    setDaiAddress,\r\n    hodlFarm,\r\n    setHodlFarm,\r\n    hodlToken,\r\n    setHodlToken,\r\n    dai,\r\n    setDai,\r\n    hodlFarmBalance,\r\n    setHodlFarmBalance,\r\n    network,\r\n    setNetwork,\r\n    web3,\r\n    setWeb3,\r\n    //calls to update balances\r\n    sentStake,\r\n    setSentStake,\r\n    sentUnstake,\r\n    setSentUnstake,\r\n    sentWithdrawal,\r\n    setSentWithdrawal\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Img>\r\n      <UserProvider value={userState}>\r\n        <ContractProvider value={contractState}>\r\n          <Main/>\r\n        </ContractProvider>\r\n      </UserProvider>\r\n    </Img>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}